{"version":3,"sources":["ThreeFieldForm.jsx","Read.jsx","Update.jsx","Form.jsx","App.js","index.js"],"names":["ThreeFieldForm","id","text","submitFunction","useState","name","setName","glucoseBlood","setGlucoseBlood","medicationDose","setMedicationDose","intakeCarbs","setIntakeCarbs","datePatch","Date","now","date","setDate","style","display","flexDirection","paddingRight","marginRight","borderRight","selected","onChange","dateFormat","autoComplete","type","e","target","value","onClick","preventDefault","data","alert","className","background","Read","baseUrl","setMean","changeCharts","setMedian","username","password","userId","setUserId","startingDate","setStartingDate","endingDate","setEndingDate","defaultChecked","for","paddingLeft","form","event","document","getElementById","checked","console","log","getTime","axios","get","params","from","to","auth","then","response","catch","resp","Update","recordId","setRecordId","Form","currentTab","setCurrentTab","setUsername","setPassword","dateOptions","year","month","day","setForm","covidAdmissions","covidCases","covidDeaths","averageGlucose","averageIntakeCarbs","averageMedicationDose","mean","bloodGlucose","setBloodGlucose","carbIntake","setCarbIntake","dates","setDates","labels","datasets","label","fill","backgroundColor","borderColor","data2","options","scales","yAxes","ticks","beginAtZero","Delete","body","delete","error","status","useEffect","component","href","forEach","el","push","map","toLocaleDateString","put","post","onSubmit","required","toFixed","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.664476bc.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nimport DatePicker from 'react-datepicker';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction ThreeFieldForm({ id, text, submitFunction }) {\r\n\r\n    const dateOptions = {\r\n        year: \"numeric\",\r\n        month: \"2-digit\",\r\n        day: \"2-digit\",\r\n    };\r\n\r\n    const [name, setName] = useState();\r\n    const [glucoseBlood, setGlucoseBlood] = useState();\r\n    const [medicationDose, setMedicationDose] = useState();\r\n    const [intakeCarbs, setIntakeCarbs] = useState();\r\n\r\n\r\n    const datePatch = new Date(Date.now());\r\n    const [date, setDate] = useState(datePatch);\r\n    return (\r\n        <div style={{ display: \"flex\", flexDirection: \"column\", paddingRight: \"50px\", marginRight: \"50px\", borderRight: \"#000 solid\" }}>\r\n            <h1>{text}</h1>\r\n            <span style={{ display: \"block-inline\" }}>Date </span>\r\n            <DatePicker\r\n                selected={date}\r\n                onChange={(date) => setDate(date)}\r\n                name=\"startDate\"\r\n                dateFormat=\"dd/MM/yyyy\"\r\n                autoComplete=\"off\"\r\n\r\n            />\r\n\r\n            <span>User ID</span>\r\n            <input type=\"text\" id={\"userid\" + id} onChange={(e)=>setName(e.target.value)}/>\r\n            <span>Blood glucose</span>\r\n            <input type=\"text\" id={\"blood\" + id} onChange={(e)=>setGlucoseBlood(e.target.value)}/>\r\n            <span>Carb intake</span>\r\n            <input type=\"text\" id={\"carbon\" + id} onChange={(e)=>setIntakeCarbs(e.target.value)}/>\r\n            <span>Medication dose</span>\r\n            <input type=\"text\" id={\"medication\" + id} onChange={(e)=>setMedicationDose(e.target.value)}/> <br></br>\r\n            <button onClick={(e) => {\r\n\r\n                e.preventDefault();\r\n                if (date) {\r\n\r\n                    let data = {\r\n                        name: name,\r\n                        glucoseBlood: glucoseBlood,\r\n                        intakeCarbs: intakeCarbs,\r\n                        medicationDose: medicationDose,\r\n                        date: date\r\n                    }\r\n                    if (data.name && data.glucoseBlood && data.intakeCarbs && data.medicationDose && data.date) {\r\n                        submitFunction(data)\r\n                    }\r\n                    else {\r\n                        alert(\"Please put in all the data before submitting!\")\r\n                    }\r\n                } else {\r\n                    alert(\"Write in the date before submitting\")\r\n                }\r\n            }} className=\"btn\" style={{ background: \"#90ee90\" }} > Submit</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ThreeFieldForm;","import React, { useEffect, useState } from \"react\";\r\nimport axios from 'axios';\r\nimport DatePicker from 'react-datepicker';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst Read = ({baseUrl, setMean, setMedian, changeCharts, username, password, userId, setUserId}) => {\r\n    const [startingDate, setStartingDate] = useState();\r\n    const [endingDate, setEndingDate] = useState();\r\n\r\n    const dateOptions = {\r\n        year: \"numeric\",\r\n        month: \"2-digit\",\r\n        day: \"2-digit\",\r\n    };\r\n    function getData(event) {\r\n\r\n        event.preventDefault();\r\n        if (document.getElementById(\"allData\").checked) getAllData();\r\n        if (document.getElementById(\"means\").checked){\r\n            // console.log(\"test\")\r\n            getMeans();\r\n        } \r\n    }\r\n    function getAllData() { \r\n\r\n\r\n        if (startingDate && endingDate) {\r\n            console.log(startingDate.getTime());\r\n            axios.get(baseUrl, {\r\n                params: {\r\n                    from: startingDate.getTime(),\r\n                    to: endingDate.getTime(),\r\n                    userId: userId,\r\n                },\r\n                auth:{\r\n                    username: username,\r\n                    password: password\r\n                }\r\n            }\r\n            ).then((response) => {\r\n                changeCharts(response.data)\r\n            })\r\n        } else {\r\n            axios.get(baseUrl,{\r\n                params:{\r\n                    userId: userId,\r\n                },\r\n                auth:{\r\n                    username: username,\r\n                    password: password,\r\n                    userId: userId\r\n                }\r\n            }).then((response) => {\r\n                \r\n                console.log(response)\r\n                changeCharts(response.data)\r\n            }).catch((resp)=>{\r\n            console.log(resp)\r\n            \r\n        })\r\n        }\r\n\r\n\r\n    }\r\n    function getMeans() {\r\n        if (startingDate && endingDate) {\r\n            axios.get(baseUrl + \"/average\", {\r\n                params: {\r\n                    from: startingDate.getTime(),\r\n                    to: endingDate.getTime()\r\n                },\r\n                auth:{\r\n                    username: username,\r\n                    password: password\r\n                }\r\n            }).then((response) => {\r\n                setMean(response.data);\r\n            })\r\n        } else {\r\n            axios.get(baseUrl + \"/average\",{\r\n                params:{\r\n                    userId: userId,\r\n                },\r\n                auth:{\r\n                    username: username,\r\n                    password: password\r\n                }\r\n            }).then((response) => {\r\n                console.log(response.data)\r\n                setMean(response.data);\r\n            })\r\n        }\r\n    }\r\n\r\n    // function getMedian() {\r\n\r\n    //     if (startingDate && endingDate) {\r\n    //         axios.get(baseUrl + \"/median\", {\r\n    //             params: {\r\n    //                 startDate: startingDate.toLocaleDateString(\"en-gb\", dateOptions).replaceAll(\"/\", \"-\"),\r\n    //                 endDate: endingDate.toLocaleDateString(\"en-gb\", dateOptions).replaceAll(\"/\", \"-\")\r\n\r\n    //             }\r\n    //         }).then((response) => {\r\n    //             setMedian(response.data);\r\n    //         })\r\n    //     } else {\r\n    //         axios.get(baseUrl + \"/median\").then((response) => {\r\n    //             setMedian(response.data);\r\n    //         })\r\n    //     }\r\n    // }\r\n    return (\r\n        <div style={{ display: \"flex\", flexDirection: \"column\", paddingRight: \"50px\", marginRight: \"50px\", borderRight: \"#000 solid\" }}>\r\n            <h1>Read data</h1>\r\n            <span style={{ display: \"block-inline\" }}>Starting date </span>\r\n            <DatePicker\r\n                selected={startingDate}\r\n                onChange={(date) => setStartingDate(date)}\r\n                name=\"startDate\"\r\n                dateFormat=\"dd/MM/yyyy\"\r\n                autoComplete=\"off\"\r\n\r\n            />\r\n\r\n            <span style={{ display: \"block-inline\" }}>Ending date</span>\r\n            <DatePicker\r\n                selected={endingDate}\r\n                onChange={(date) => setEndingDate(date)}\r\n                name=\"startDate\"\r\n                dateFormat=\"dd/MM/yyyy\"\r\n                autoComplete=\"off\"\r\n            />\r\n            <span>User ID</span>\r\n            <input type=\"text\" id={\"userIdRead\"} onChange={(e)=>{setUserId(e.target.value)}}/>\r\n\r\n            <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n                <div>\r\n                    <input type=\"checkbox\" id=\"allData\" value=\"allData\" defaultChecked={true}/>\r\n                    <label for=\"allData\" style={{ paddingLeft: \"10px\" }}>All data</label>\r\n                </div>\r\n                <div>\r\n                    <input type=\"checkbox\" id=\"means\" />\r\n                    <label for=\"means\" style={{ paddingLeft: \"10px\" }}>Include average blood glucose and carb intake</label>\r\n                </div>\r\n                {/* <div>\r\n                    <input type=\"checkbox\" id=\"median\" />\r\n                    <label for=\"meanCarb\" style={{ paddingLeft: \"10px\" }}>Average carbon</label>\r\n                </div> */}\r\n            </div>\r\n            <br></br>\r\n            <button form=\"login\" onClick={getData} className=\"btn\" style={{ background: \"#90ee90\" }} > Submit</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Read;","import React, { useEffect, useState } from \"react\";\r\n\r\nimport DatePicker from 'react-datepicker';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction Update({ id, text, submitFunction }) {\r\n\r\n    const dateOptions = {\r\n        year: \"numeric\",\r\n        month: \"2-digit\",\r\n        day: \"2-digit\",\r\n    };\r\n\r\n    const [recordId, setRecordId] = useState();\r\n    const [name, setName] = useState();\r\n    const [glucoseBlood, setGlucoseBlood] = useState();\r\n    const [medicationDose, setMedicationDose] = useState();\r\n    const [intakeCarbs, setIntakeCarbs] = useState();\r\n\r\n\r\n    const datePatch = new Date(Date.now());\r\n    const [date, setDate] = useState(datePatch);\r\n    return (\r\n        <div style={{ display: \"flex\", flexDirection: \"column\", paddingRight: \"50px\", marginRight: \"50px\", borderRight: \"#000 solid\" }}>\r\n            <h1>{text}</h1>\r\n            <span style={{ display: \"block-inline\" }}>Date </span>\r\n            <DatePicker\r\n                selected={date}\r\n                onChange={(date) => setDate(date)}\r\n                name=\"startDate\"\r\n                dateFormat=\"dd/MM/yyyy\"\r\n                autoComplete=\"off\"\r\n\r\n            />\r\n\r\n            <span>Record ID</span>\r\n            <input type=\"text\" id={\"userid\" + id} onChange={(e)=>setRecordId(e.target.value)}/>\r\n            <span>User ID</span>\r\n            <input type=\"text\" id={\"userid\" + id} onChange={(e)=>setName(e.target.value)}/>\r\n            <span>Blood glucose</span>\r\n            <input type=\"text\" id={\"blood\" + id} onChange={(e)=>setGlucoseBlood(e.target.value)}/>\r\n            <span>Carb intake</span>\r\n            <input type=\"text\" id={\"carbon\" + id} onChange={(e)=>setIntakeCarbs(e.target.value)}/>\r\n            <span>Medication dose</span>\r\n            <input type=\"text\" id={\"medication\" + id} onChange={(e)=>setMedicationDose(e.target.value)}/> <br></br>\r\n            <button onClick={(e) => {\r\n\r\n                e.preventDefault();\r\n                if (date) {\r\n\r\n                    let data = {\r\n                        name: name,\r\n                        glucoseBlood: glucoseBlood,\r\n                        intakeCarbs: intakeCarbs,\r\n                        medicationDose: medicationDose,\r\n                        date: date,\r\n                        recordId:recordId\r\n                    }\r\n                    if (data.name && data.glucoseBlood && data.intakeCarbs && data.medicationDose && data.date && data.recordId) {\r\n                        submitFunction(data)\r\n                    }\r\n                    else {\r\n                        alert(\"Please put in all the data before submitting!\")\r\n                    }\r\n                } else {\r\n                    alert(\"Write in the date before submitting\")\r\n                }\r\n            }} className=\"btn\" style={{ background: \"#90ee90\" }} > Submit</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Update;","import React, { useEffect, useState } from \"react\";\r\nimport axios from 'axios';\r\nimport Grid from \"react-fast-grid\";\r\nimport DatePicker from 'react-datepicker';\r\nimport { Line } from 'react-chartjs-2';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport ThreeFieldForm from \"./ThreeFieldForm\";\r\nimport Read from \"./Read\"\r\nimport Update from \"./Update\"\r\n\r\nfunction Form() {\r\n\r\n    const [deleteDate, setDeleteDate] = useState(new Date(Date.now()));\r\n    const [currentTab, setCurrentTab] = useState(\"read\");\r\n    const [username, setUsername] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [userId, setUserId] = useState();\r\n    const dateOptions = {\r\n        year: \"numeric\",\r\n        month: \"2-digit\",\r\n        day: \"2-digit\",\r\n    };\r\n\r\n    const [form, setForm] = useState();\r\n\r\n    const [median, setMedian] = useState({\r\n        covidAdmissions: 0,\r\n        covidCases: 0,\r\n        covidDeaths: 0\r\n    });\r\n    const [mean, setMean] = useState({\r\n        averageGlucose: 0,\r\n        averageIntakeCarbs: 0,\r\n        averageMedicationDose: 0\r\n    });\r\n\r\n    const [bloodGlucose, setBloodGlucose] = useState([1, 2, 3, 4])\r\n    const [medicationDose, setMedicationDose] = useState([1, 2, 3, 4])\r\n    const [carbIntake, setCarbIntake] = useState([1, 2, 3, 4])\r\n\r\n    const [dates, setDates] = useState([])\r\n    const data = {\r\n        labels: dates,\r\n        datasets: [\r\n            {\r\n                label: 'Carb intake in grams',\r\n                data: carbIntake,\r\n                fill: false,\r\n                backgroundColor: 'rgb(255, 99, 132)',\r\n                borderColor: 'rgba(255, 99, 132, 0.2)',\r\n            },\r\n        ]\r\n    };\r\n\r\n    // const data1 = {\r\n    //     labels: dates,\r\n    //     datasets: [{\r\n    //         label: 'Medication dose in grams',\r\n    //         data: medicationDose,\r\n    //         fill: false,\r\n    //         backgroundColor: 'rgb(2, 99, 12)',\r\n    //         borderColor: 'rgba(2, 99, 13, 0.2)',\r\n    //     }]\r\n    // }\r\n    const data2 = {\r\n        labels: dates,\r\n        datasets: [{\r\n\r\n            label: 'Blood glucose in mg',\r\n            data: bloodGlucose,\r\n            fill: false,\r\n            backgroundColor: 'rgb(0, 12, 200)',\r\n            borderColor: 'rgba(0, 12, 200, 0.2)',\r\n        }]\r\n    };\r\n\r\n    const options = {\r\n        scales: {\r\n            yAxes: [{\r\n                ticks: {\r\n                    beginAtZero: true\r\n                }\r\n            }]\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    const baseUrl = \"/rest/records\";\r\n\r\n    function createData(body) {\r\n\r\n        axios.post(baseUrl, body, {\r\n            auth: {\r\n                username: username,\r\n                password: password\r\n            }\r\n        }\r\n        ).then((response) => {\r\n            console.log(response)\r\n            if (response.status == 201)\r\n                alert(\"ID: \" + body.id);\r\n\r\n        }).catch((error) => {\r\n            if (error.status == 401 || error.status == 403)\r\n                alert(\"That command is only for admins\")\r\n            else\r\n                alert(\"Not modified\");\r\n\r\n        });\r\n\r\n    }\r\n\r\n    function updateData(body) {\r\n\r\n        axios.put(baseUrl + \"/\" + body.recordId, body, {\r\n            auth: {\r\n                username: username,\r\n                password: password\r\n            }\r\n        }).then((response) => {\r\n            console.log(response)\r\n            if (response.status == 200)\r\n                alert(\"Entry update successfully for date: \" + body.date);\r\n            else {\r\n                alert(\"Entry for id \" + body.recordId + \" did not exist. New entry added for id \" + body.recordId)\r\n            }\r\n        }\r\n        ).catch((error) => {\r\n            if (error.status == 401 || error.status == 403)\r\n                alert(\"That command can only be used by admins!\")\r\n            else\r\n                alert(\"Entry for date \" + body.recordId + \" does not exist\")\r\n        }\r\n        );\r\n\r\n    }\r\n    function deleteData(body) {\r\n\r\n        axios.delete(baseUrl + \"/\" + body, \r\n        {\r\n            auth:{\r\n                username: username,\r\n                password: password\r\n            }\r\n        }).then((response) => {\r\n            alert(\"Entry for date \" + body + \" successfully deleted\");\r\n        }).catch((error) => {\r\n            if (error.status == 401 || error.status == 403)\r\n                alert(\"That command can only be used by admins!\")\r\n            else\r\n                alert(\"An entry for date \" + body + \" does not exist!\")\r\n        });\r\n\r\n    }\r\n    // const baseUrl = \"https://covid-tracker-cw.herokuapp.com/api\";\r\n\r\n\r\n\r\n\r\n\r\n    function changeCharts(data) {\r\n        console.log(data)\r\n        let bloodGlucose = [];\r\n        let carbIntake = [];\r\n        let medicationDose = [];\r\n        let dates = [];\r\n        data.forEach((el) => {\r\n            dates.push(el.date);\r\n            bloodGlucose.push(el.glucoseBlood);\r\n            carbIntake.push(el.intakeCarbs);\r\n            medicationDose.push(el.medicationDose);\r\n        })\r\n        data.forEach((el) => {\r\n            dates.push(el.date);\r\n            bloodGlucose.push(el.glucoseBlood);\r\n            carbIntake.push(el.intakeCarbs);\r\n            medicationDose.push(el.medicationDose);\r\n        })\r\n        data.forEach((el) => {\r\n            dates.push(el.date);\r\n            bloodGlucose.push(el.glucoseBlood);\r\n            carbIntake.push(el.intakeCarbs);\r\n            medicationDose.push(el.medicationDose);\r\n        })\r\n        dates = dates.map(date => {\r\n            let newDate = new Date(date);\r\n            return newDate.toLocaleDateString(\"en-gb\", dateOptions);\r\n\r\n        });\r\n        setDates(dates);\r\n        setBloodGlucose(bloodGlucose);\r\n        setCarbIntake(carbIntake);\r\n        setMedicationDose(medicationDose);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    const Delete = () => {\r\n        const [recordId, setRecordId] = useState();\r\n        return (\r\n            <div style={{ display: \"flex\", flexDirection: \"column\", paddingRight: \"50px\", marginRight: \"50px\", borderRight: \"#000 solid\" }}>\r\n                <h1>Delete data</h1>\r\n                <span style={{ display: \"block-inline\" }}>Record ID </span>\r\n                <input type=\"text\" id=\"text\" onChange={(e)=>{setRecordId(e.target.value)}} />\r\n                <br></br>\r\n                <button form=\"login\" onClick={() => { deleteData(recordId) }} className=\"btn\" style={{ background: \"#90ee90\" }} > Submit</button>\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n    useEffect(() => {\r\n        let component = null;\r\n        console.log(currentTab)\r\n        switch (currentTab) {\r\n            case \"read\":\r\n\r\n            default:\r\n                component = <></>\r\n        }\r\n        setForm(component);\r\n    }, [currentTab])\r\n\r\n\r\n    return (\r\n        <div className=\"grid-container\">\r\n            <div className=\"grid-item grid-item-1\"\r\n            // style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"center\", background: \"#b3e5fc\" }} className={\"col\"}\r\n            >\r\n                {/* <Read />\r\n                <ThreeFieldForm id={1} text={\"Create data\"} submitFunction={createData} ></ThreeFieldForm>\r\n                <ThreeFieldForm id={2} text={\"Update data\"} submitFunction={updateData}></ThreeFieldForm>\r\n                <Delete /> */}\r\n                <div style={{ display: \"flex\", flexDirection: \"column\", paddingRight: \"50px\", marginRight: \"50px\", borderRight: \"#000 solid\" }}>\r\n                    <a href=\"\" onClick={(e) => { e.preventDefault(); setCurrentTab(\"create\") }}>Create data</a>\r\n                    <a href=\"\" onClick={(e) => { e.preventDefault(); setCurrentTab(\"read\") }}>Read data</a>\r\n                    <a href=\"\" onClick={(e) => { e.preventDefault(); setCurrentTab(\"update\") }}>Update data</a>\r\n                    <a href=\"\" onClick={(e) => { e.preventDefault(); setCurrentTab(\"delete\") }}>Delete data</a>\r\n\r\n\r\n\r\n                </div>\r\n                <div style={{ display: currentTab === \"read\" ? true : \"none\" }}>\r\n                    <Read username={username} password={password} setMean={setMean} baseUrl={baseUrl} setMedian={setMedian} changeCharts={changeCharts} userId={userId} setUserId={setUserId} />\r\n                </div>\r\n                <div style={{ display: currentTab === \"delete\" ? true : \"none\" }}>\r\n                    <Delete />\r\n                </div>\r\n                <div style={{ display: currentTab === \"update\" ? true : \"none\" }}>\r\n                    <Update id={2} text={\"Update data\"} submitFunction={updateData}></Update>\r\n                </div>\r\n                <div style={{ display: currentTab === \"create\" ? true : \"none\" }}>\r\n                    <ThreeFieldForm id={1} text={\"Create data\"} submitFunction={createData}></ThreeFieldForm>\r\n                </div>\r\n\r\n\r\n                {/* <a href=\"/logout\"> <button>\r\n                    LOG OUT\r\n                </button></a> */}\r\n\r\n                <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n                    <form id=\"login\" onSubmit={(e) => e.preventDefault()}>\r\n                        <h6>Type in the credentials that will be used to send the request</h6>\r\n                        <span>Username</span>\r\n                        <input type=\"text\" id=\"username\" onChange={(e) => { setUsername(e.target.value) }} required />\r\n                        <br></br>\r\n                        <span>Password</span>\r\n                        <input type=\"password\" id=\"password\" onChange={(e) => { setPassword(e.target.value) }} required />\r\n                    </form>\r\n                </div>\r\n\r\n\r\n                <div className=\"grid-item grid-item-3\">\r\n\r\n                    <div className=\"grid-item mean\">\r\n                        <h1>Average data:</h1>\r\n                        <p>Blood glucose: <b>{mean.averageGlucose.toFixed(2)}</b></p>\r\n                        <p>Carb Intake: <b>{mean.averageIntakeCarbs.toFixed(2)}</b></p>\r\n                        <p>Medication dose: <b>{mean.averageMedicationDose.toFixed(2)}</b></p>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n            </div>\r\n\r\n\r\n            <div className=\"grid-item grid-item-2 carb-intake\">\r\n                <div className='header'>\r\n                    <h4 className='title'>Carb Intake</h4>\r\n                </div>\r\n                <Line data={data} options={options} />\r\n            </div>\r\n\r\n            {/* <div className=\"grid-item grid-item-2 admissions\">\r\n                <div className='header'>\r\n                    <h4 className='title'>Medication Dose</h4>\r\n                </div>\r\n                <Line data={data1} options={options} />\r\n            </div> */}\r\n\r\n            <div className=\"grid-item grid-item-3 blood-glucose\">\r\n                <div className='header'>\r\n                    <h4 className='title'>Blood Glucose</h4>\r\n                </div>\r\n                <Line data={data2} options={options} />\r\n            </div>\r\n\r\n\r\n\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Form;\r\n","import './App.css';\r\nimport Form from './Form';\r\n\r\nfunction App() {\r\n  return (\r\n    <Form> </Form>);\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}