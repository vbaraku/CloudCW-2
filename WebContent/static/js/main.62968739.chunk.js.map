{"version":3,"sources":["ThreeFieldForm.jsx","Read.jsx","Update.jsx","Form.jsx","App.js","index.js"],"names":["ThreeFieldForm","id","text","submitFunction","useState","name","setName","glucoseBlood","setGlucoseBlood","medicationDose","setMedicationDose","intakeCarbs","setIntakeCarbs","datePatch","Date","now","date","setDate","style","display","flexDirection","paddingRight","marginRight","borderRight","selected","onChange","dateFormat","autoComplete","type","e","target","value","onClick","preventDefault","data","alert","className","background","Read","baseUrl","setMean","changeCharts","username","password","userId","setUserId","startingDate","setStartingDate","endingDate","setEndingDate","defaultChecked","for","paddingLeft","form","event","document","getElementById","checked","console","log","getTime","axios","get","params","from","to","auth","then","response","catch","resp","Update","recordId","setRecordId","Form","currentTab","setCurrentTab","setUsername","setPassword","dateOptions","year","month","day","setForm","averageGlucose","averageIntakeCarbs","averageMedicationDose","mean","bloodGlucose","setBloodGlucose","carbIntake","setCarbIntake","dates","setDates","labels","datasets","label","fill","backgroundColor","borderColor","data2","options","scales","yAxes","ticks","beginAtZero","allData","setAllData","fetchAllData","Delete","body","delete","error","status","useEffect","component","href","forEach","el","push","map","toLocaleDateString","put","post","onSubmit","required","toFixed","padding","TableContainer","Paper","Table","sx","minWidth","marginLeft","size","TableHead","TableRow","TableCell","align","TableBody","row","border","scope","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.62968739.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nfunction ThreeFieldForm({ id, text, submitFunction }) {\r\n  const dateOptions = {\r\n    year: \"numeric\",\r\n    month: \"2-digit\",\r\n    day: \"2-digit\",\r\n  };\r\n\r\n  const [name, setName] = useState();\r\n  const [glucoseBlood, setGlucoseBlood] = useState();\r\n  const [medicationDose, setMedicationDose] = useState();\r\n  const [intakeCarbs, setIntakeCarbs] = useState();\r\n\r\n  const datePatch = new Date(Date.now());\r\n  const [date, setDate] = useState(datePatch);\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        paddingRight: \"50px\",\r\n        marginRight: \"50px\",\r\n        borderRight: \"#000 solid\",\r\n      }}\r\n    >\r\n      <h1>{text}</h1>\r\n      <span style={{ display: \"block-inline\" }}>Date </span>\r\n      <DatePicker\r\n        selected={date}\r\n        onChange={(date) => setDate(date)}\r\n        name=\"startDate\"\r\n        dateFormat=\"dd/MM/yyyy\"\r\n        autoComplete=\"off\"\r\n      />\r\n      <span>User ID</span>\r\n      <input\r\n        type=\"text\"\r\n        id={\"userid\" + id}\r\n        onChange={(e) => setName(e.target.value)}\r\n      />\r\n      <span>Blood glucose</span>\r\n      <input\r\n        type=\"text\"\r\n        id={\"blood\" + id}\r\n        onChange={(e) => setGlucoseBlood(e.target.value)}\r\n      />\r\n      <span>Carb intake</span>\r\n      <input\r\n        type=\"text\"\r\n        id={\"carbon\" + id}\r\n        onChange={(e) => setIntakeCarbs(e.target.value)}\r\n      />\r\n      <span>Medication dose</span>\r\n      <input\r\n        type=\"text\"\r\n        id={\"medication\" + id}\r\n        onChange={(e) => setMedicationDose(e.target.value)}\r\n      />{\" \"}\r\n      <br></br>\r\n      <button\r\n        onClick={(e) => {\r\n          e.preventDefault();\r\n          if (date) {\r\n            let data = {\r\n              name: name,\r\n              glucoseBlood: glucoseBlood,\r\n              intakeCarbs: intakeCarbs,\r\n              medicationDose: medicationDose,\r\n              date: date,\r\n            };\r\n            if (\r\n              data.name &&\r\n              data.glucoseBlood &&\r\n              data.intakeCarbs &&\r\n              data.medicationDose &&\r\n              data.date\r\n            ) {\r\n              submitFunction(data);\r\n            } else {\r\n              alert(\"Please put in all the data before submitting!\");\r\n            }\r\n          } else {\r\n            alert(\"Write in the date before submitting\");\r\n          }\r\n        }}\r\n        className=\"btn\"\r\n        style={{ background: \"#90ee90\" }}\r\n      >\r\n        {\" \"}\r\n        Submit\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ThreeFieldForm;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nconst Read = ({\r\n  baseUrl,\r\n  setMean,\r\n  changeCharts,\r\n  username,\r\n  password,\r\n  userId,\r\n  setUserId,\r\n}) => {\r\n  const [startingDate, setStartingDate] = useState();\r\n  const [endingDate, setEndingDate] = useState();\r\n\r\n  const dateOptions = {\r\n    year: \"numeric\",\r\n    month: \"2-digit\",\r\n    day: \"2-digit\",\r\n  };\r\n  function getData(event) {\r\n    event.preventDefault();\r\n    if (document.getElementById(\"allData\").checked) getAllData();\r\n    if (document.getElementById(\"means\").checked) {\r\n      getMeans();\r\n    }\r\n  }\r\n  function getAllData() {\r\n    if (startingDate && endingDate) {\r\n      console.log(startingDate.getTime());\r\n      axios\r\n        .get(baseUrl, {\r\n          params: {\r\n            from: startingDate.getTime(),\r\n            to: endingDate.getTime(),\r\n            userId: userId,\r\n          },\r\n          auth: {\r\n            username: username,\r\n            password: password,\r\n          },\r\n        })\r\n        .then((response) => {\r\n          changeCharts(response.data);\r\n        });\r\n    } else {\r\n      axios\r\n        .get(baseUrl, {\r\n          params: {\r\n            userId: userId,\r\n          },\r\n          auth: {\r\n            username: username,\r\n            password: password,\r\n            userId: userId,\r\n          },\r\n        })\r\n        .then((response) => {\r\n          console.log(response);\r\n          changeCharts(response.data);\r\n        })\r\n        .catch((resp) => {\r\n          console.log(resp);\r\n        });\r\n    }\r\n  }\r\n  function getMeans() {\r\n    if (startingDate && endingDate) {\r\n      axios\r\n        .get(baseUrl + \"/average\", {\r\n          params: {\r\n            from: startingDate.getTime(),\r\n            to: endingDate.getTime(),\r\n          },\r\n          auth: {\r\n            username: username,\r\n            password: password,\r\n          },\r\n        })\r\n        .then((response) => {\r\n          setMean(response.data);\r\n        });\r\n    } else {\r\n      axios\r\n        .get(baseUrl + \"/average\", {\r\n          params: {\r\n            userId: userId,\r\n          },\r\n          auth: {\r\n            username: username,\r\n            password: password,\r\n          },\r\n        })\r\n        .then((response) => {\r\n          console.log(response.data);\r\n          setMean(response.data);\r\n        });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        paddingRight: \"50px\",\r\n        marginRight: \"50px\",\r\n        borderRight: \"#000 solid\",\r\n      }}\r\n    >\r\n      <h1>Read data</h1>\r\n      <span style={{ display: \"block-inline\" }}>Starting date </span>\r\n      <DatePicker\r\n        selected={startingDate}\r\n        onChange={(date) => setStartingDate(date)}\r\n        name=\"startDate\"\r\n        dateFormat=\"dd/MM/yyyy\"\r\n        autoComplete=\"off\"\r\n      />\r\n\r\n      <span style={{ display: \"block-inline\" }}>Ending date</span>\r\n      <DatePicker\r\n        selected={endingDate}\r\n        onChange={(date) => setEndingDate(date)}\r\n        name=\"startDate\"\r\n        dateFormat=\"dd/MM/yyyy\"\r\n        autoComplete=\"off\"\r\n      />\r\n      <span>User ID</span>\r\n      <input\r\n        type=\"text\"\r\n        id={\"userIdRead\"}\r\n        onChange={(e) => {\r\n          setUserId(e.target.value);\r\n        }}\r\n      />\r\n\r\n      <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n        <div>\r\n          <input\r\n            type=\"checkbox\"\r\n            id=\"allData\"\r\n            value=\"allData\"\r\n            defaultChecked={true}\r\n          />\r\n          <label for=\"allData\" style={{ paddingLeft: \"10px\" }}>\r\n            All data\r\n          </label>\r\n        </div>\r\n        <div>\r\n          <input type=\"checkbox\" id=\"means\" />\r\n          <label for=\"means\" style={{ paddingLeft: \"10px\" }}>\r\n            Include average blood glucose and carb intake\r\n          </label>\r\n        </div>\r\n      </div>\r\n      <br></br>\r\n      <button\r\n        form=\"login\"\r\n        onClick={getData}\r\n        className=\"btn\"\r\n        style={{ background: \"#90ee90\" }}\r\n      >\r\n        {\" \"}\r\n        Submit\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Read;\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nfunction Update({ id, text, submitFunction }) {\r\n  const dateOptions = {\r\n    year: \"numeric\",\r\n    month: \"2-digit\",\r\n    day: \"2-digit\",\r\n  };\r\n\r\n  const [recordId, setRecordId] = useState();\r\n  const [name, setName] = useState();\r\n  const [glucoseBlood, setGlucoseBlood] = useState();\r\n  const [medicationDose, setMedicationDose] = useState();\r\n  const [intakeCarbs, setIntakeCarbs] = useState();\r\n\r\n  const datePatch = new Date(Date.now());\r\n  const [date, setDate] = useState(datePatch);\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        paddingRight: \"50px\",\r\n        marginRight: \"50px\",\r\n        borderRight: \"#000 solid\",\r\n      }}\r\n    >\r\n      <h1>{text}</h1>\r\n      <span style={{ display: \"block-inline\" }}>Date </span>\r\n      <DatePicker\r\n        selected={date}\r\n        onChange={(date) => setDate(date)}\r\n        name=\"startDate\"\r\n        dateFormat=\"dd/MM/yyyy\"\r\n        autoComplete=\"off\"\r\n      />\r\n      <span>Record ID</span>\r\n      <input\r\n        type=\"text\"\r\n        id={\"userid\" + id}\r\n        onChange={(e) => setRecordId(e.target.value)}\r\n      />\r\n      <span>User ID</span>\r\n      <input\r\n        type=\"text\"\r\n        id={\"userid\" + id}\r\n        onChange={(e) => setName(e.target.value)}\r\n      />\r\n      <span>Blood glucose</span>\r\n      <input\r\n        type=\"text\"\r\n        id={\"blood\" + id}\r\n        onChange={(e) => setGlucoseBlood(e.target.value)}\r\n      />\r\n      <span>Carb intake</span>\r\n      <input\r\n        type=\"text\"\r\n        id={\"carbon\" + id}\r\n        onChange={(e) => setIntakeCarbs(e.target.value)}\r\n      />\r\n      <span>Medication dose</span>\r\n      <input\r\n        type=\"text\"\r\n        id={\"medication\" + id}\r\n        onChange={(e) => setMedicationDose(e.target.value)}\r\n      />{\" \"}\r\n      <br></br>\r\n      <button\r\n        onClick={(e) => {\r\n          e.preventDefault();\r\n          if (date) {\r\n            let data = {\r\n              name: name,\r\n              glucoseBlood: glucoseBlood,\r\n              intakeCarbs: intakeCarbs,\r\n              medicationDose: medicationDose,\r\n              date: date,\r\n              recordId: recordId,\r\n            };\r\n            if (\r\n              data.name &&\r\n              data.glucoseBlood &&\r\n              data.intakeCarbs &&\r\n              data.medicationDose &&\r\n              data.date &&\r\n              data.recordId\r\n            ) {\r\n              submitFunction(data);\r\n            } else {\r\n              alert(\"Please put in all the data before submitting!\");\r\n            }\r\n          } else {\r\n            alert(\"Write in the date before submitting\");\r\n          }\r\n        }}\r\n        className=\"btn\"\r\n        style={{ background: \"#90ee90\" }}\r\n      >\r\n        {\" \"}\r\n        Submit\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Update;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport Grid from \"react-fast-grid\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport ThreeFieldForm from \"./ThreeFieldForm\";\r\nimport Read from \"./Read\";\r\nimport Update from \"./Update\";\r\nimport Table from \"@mui/material/Table\";\r\nimport TableBody from \"@mui/material/TableBody\";\r\nimport TableCell from \"@mui/material/TableCell\";\r\nimport TableContainer from \"@mui/material/TableContainer\";\r\nimport TableHead from \"@mui/material/TableHead\";\r\nimport TableRow from \"@mui/material/TableRow\";\r\nimport Paper from \"@mui/material/Paper\";\r\n\r\nfunction Form() {\r\n  const [deleteDate, setDeleteDate] = useState(new Date(Date.now()));\r\n  const [currentTab, setCurrentTab] = useState(\"read\");\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [userId, setUserId] = useState();\r\n  const dateOptions = {\r\n    year: \"numeric\",\r\n    month: \"2-digit\",\r\n    day: \"2-digit\",\r\n  };\r\n\r\n  const [form, setForm] = useState();\r\n\r\n  const [mean, setMean] = useState({\r\n    averageGlucose: 0,\r\n    averageIntakeCarbs: 0,\r\n    averageMedicationDose: 0,\r\n  });\r\n\r\n  const [bloodGlucose, setBloodGlucose] = useState([1, 2, 3, 4]);\r\n  const [medicationDose, setMedicationDose] = useState([1, 2, 3, 4]);\r\n  const [carbIntake, setCarbIntake] = useState([1, 2, 3, 4]);\r\n\r\n  const [dates, setDates] = useState([]);\r\n  const data = {\r\n    labels: dates,\r\n    datasets: [\r\n      {\r\n        label: \"Carb intake in grams\",\r\n        data: carbIntake,\r\n        fill: false,\r\n        backgroundColor: \"rgb(255, 99, 132)\",\r\n        borderColor: \"rgba(255, 99, 132, 0.2)\",\r\n      },\r\n    ],\r\n  };\r\n\r\n  const data2 = {\r\n    labels: dates,\r\n    datasets: [\r\n      {\r\n        label: \"Blood glucose in mg\",\r\n        data: bloodGlucose,\r\n        fill: false,\r\n        backgroundColor: \"rgb(0, 12, 200)\",\r\n        borderColor: \"rgba(0, 12, 200, 0.2)\",\r\n      },\r\n    ],\r\n  };\r\n\r\n  const options = {\r\n    scales: {\r\n      yAxes: [\r\n        {\r\n          ticks: {\r\n            beginAtZero: true,\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  };\r\n\r\n  const baseUrl = \"/rest/records\";\r\n\r\n  const [allData, setAllData] = useState([]);\r\n\r\n  function fetchAllData() {\r\n    axios\r\n      .get(baseUrl, {\r\n        params: {\r\n          userId: userId,\r\n        },\r\n        auth: {\r\n          username: username,\r\n          password: password,\r\n          userId: userId,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        console.log(response);\r\n        setAllData(response.data);\r\n      })\r\n      .catch((resp) => {\r\n        console.log(resp);\r\n      });\r\n  }\r\n\r\n  function createData(body) {\r\n    axios\r\n      .post(baseUrl, body, {\r\n        auth: {\r\n          username: username,\r\n          password: password,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        console.log(response);\r\n        if (response.status == 201) alert(\"ID: \" + body.id);\r\n      })\r\n      .catch((error) => {\r\n        if (error.status == 401 || error.status == 403)\r\n          alert(\"That command is only for admins\");\r\n        else alert(\"Not modified\");\r\n      });\r\n  }\r\n\r\n  function updateData(body) {\r\n    axios\r\n      .put(baseUrl + \"/\" + body.recordId, body, {\r\n        auth: {\r\n          username: username,\r\n          password: password,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        console.log(response);\r\n        if (response.status == 200)\r\n          alert(\"Entry update successfully for date: \" + body.date);\r\n        else {\r\n          alert(\r\n            \"Entry for id \" +\r\n              body.recordId +\r\n              \" did not exist. New entry added for id \" +\r\n              body.recordId\r\n          );\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        if (error.status == 401 || error.status == 403)\r\n          alert(\"That command can only be used by admins!\");\r\n        else alert(\"Entry for date \" + body.recordId + \" does not exist\");\r\n      });\r\n  }\r\n  function deleteData(body) {\r\n    axios\r\n      .delete(baseUrl + \"/\" + body, {\r\n        auth: {\r\n          username: username,\r\n          password: password,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        alert(\"Entry for date \" + body + \" successfully deleted\");\r\n      })\r\n      .catch((error) => {\r\n        if (error.status == 401 || error.status == 403)\r\n          alert(\"That command can only be used by admins!\");\r\n        else alert(\"An entry for date \" + body + \" does not exist!\");\r\n      });\r\n  }\r\n\r\n  function changeCharts(data) {\r\n    console.log(data);\r\n    let bloodGlucose = [];\r\n    let carbIntake = [];\r\n    let medicationDose = [];\r\n    let dates = [];\r\n    data.forEach((el) => {\r\n      dates.push(el.date);\r\n      bloodGlucose.push(el.glucoseBlood);\r\n      carbIntake.push(el.intakeCarbs);\r\n      medicationDose.push(el.medicationDose);\r\n    });\r\n    dates = dates.map((date) => {\r\n      let newDate = new Date(date);\r\n      return newDate.toLocaleDateString(\"en-gb\", dateOptions);\r\n    });\r\n    setDates(dates);\r\n    setBloodGlucose(bloodGlucose);\r\n    setCarbIntake(carbIntake);\r\n    setMedicationDose(medicationDose);\r\n  }\r\n\r\n  const Delete = () => {\r\n    const [recordId, setRecordId] = useState();\r\n    return (\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          paddingRight: \"50px\",\r\n          marginRight: \"50px\",\r\n          borderRight: \"#000 solid\",\r\n        }}\r\n      >\r\n        <h1>Delete data</h1>\r\n        <span style={{ display: \"block-inline\" }}>Record ID </span>\r\n        <input\r\n          type=\"text\"\r\n          id=\"text\"\r\n          onChange={(e) => {\r\n            setRecordId(e.target.value);\r\n          }}\r\n        />\r\n        <br></br>\r\n        <button\r\n          form=\"login\"\r\n          onClick={() => {\r\n            deleteData(recordId);\r\n            fetchAllData();\r\n          }}\r\n          className=\"btn\"\r\n          style={{ background: \"#90ee90\" }}\r\n        >\r\n          {\" \"}\r\n          Submit\r\n        </button>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchAllData();\r\n    let component = null;\r\n    console.log(currentTab);\r\n    switch (currentTab) {\r\n      case \"read\":\r\n\r\n      default:\r\n        component = <></>;\r\n    }\r\n    setForm(component);\r\n  }, [currentTab]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"grid-container\">\r\n        <div\r\n          className=\"grid-item grid-item-1\"\r\n          // style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"center\", background: \"#b3e5fc\" }} className={\"col\"}\r\n        >\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              paddingRight: \"50px\",\r\n              marginRight: \"50px\",\r\n              borderRight: \"#000 solid\",\r\n            }}\r\n          >\r\n            <a\r\n              href=\"\"\r\n              onClick={(e) => {\r\n                e.preventDefault();\r\n                setCurrentTab(\"create\");\r\n              }}\r\n            >\r\n              Create_data\r\n            </a>\r\n            <a\r\n              href=\"\"\r\n              onClick={(e) => {\r\n                e.preventDefault();\r\n                setCurrentTab(\"read\");\r\n              }}\r\n            >\r\n              Read data\r\n            </a>\r\n            <a\r\n              href=\"\"\r\n              onClick={(e) => {\r\n                e.preventDefault();\r\n                setCurrentTab(\"update\");\r\n              }}\r\n            >\r\n              Update_data\r\n            </a>\r\n            <a\r\n              href=\"\"\r\n              onClick={(e) => {\r\n                e.preventDefault();\r\n                setCurrentTab(\"delete\");\r\n              }}\r\n            >\r\n              Delete data\r\n            </a>\r\n          </div>\r\n          <div style={{ display: currentTab === \"read\" ? true : \"none\" }}>\r\n            <Read\r\n              username={username}\r\n              password={password}\r\n              setMean={setMean}\r\n              baseUrl={baseUrl}\r\n              changeCharts={changeCharts}\r\n              userId={userId}\r\n              setUserId={setUserId}\r\n            />\r\n          </div>\r\n          <div style={{ display: currentTab === \"delete\" ? true : \"none\" }}>\r\n            <Delete />\r\n          </div>\r\n          <div style={{ display: currentTab === \"update\" ? true : \"none\" }}>\r\n            <Update\r\n              id={2}\r\n              text={\"Update data\"}\r\n              submitFunction={updateData}\r\n            ></Update>\r\n          </div>\r\n          <div style={{ display: currentTab === \"create\" ? true : \"none\" }}>\r\n            <ThreeFieldForm\r\n              id={1}\r\n              text={\"Create data\"}\r\n              submitFunction={createData}\r\n            ></ThreeFieldForm>\r\n          </div>\r\n\r\n          <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n            <form id=\"login\" onSubmit={(e) => e.preventDefault()}>\r\n              <h6>\r\n                Type in the credentials that will be used to send the request\r\n              </h6>\r\n              <span>Username</span>\r\n              <input\r\n                type=\"text\"\r\n                id=\"username\"\r\n                onChange={(e) => {\r\n                  setUsername(e.target.value);\r\n                }}\r\n                required\r\n              />\r\n              <br></br>\r\n              <span>Password</span>\r\n              <input\r\n                type=\"password\"\r\n                id=\"password\"\r\n                onChange={(e) => {\r\n                  setPassword(e.target.value);\r\n                }}\r\n                required\r\n              />\r\n            </form>\r\n          </div>\r\n\r\n          <div className=\"grid-item grid-item-3\">\r\n            <div className=\"grid-item mean\">\r\n              <h1>Average data:</h1>\r\n              <p>\r\n                Blood glucose: <b>{mean.averageGlucose.toFixed(2)}</b>\r\n              </p>\r\n              <p>\r\n                Carb Intake: <b>{mean.averageIntakeCarbs.toFixed(2)}</b>\r\n              </p>\r\n              <p>\r\n                Medication dose: <b>{mean.averageMedicationDose.toFixed(2)}</b>\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"grid-item grid-item-2 carb-intake\">\r\n          <div className=\"header\">\r\n            <h4 className=\"title\">Carb Intake</h4>\r\n          </div>\r\n          <Line data={data} options={options} />\r\n        </div>\r\n\r\n        <div className=\"grid-item grid-item-3 blood-glucose\">\r\n          <div className=\"header\">\r\n            <h4 className=\"title\">Blood Glucose</h4>\r\n          </div>\r\n          <Line data={data2} options={options} />\r\n        </div>\r\n      </div>\r\n      <div style={{ padding: 15 }}>\r\n        <TableContainer component={Paper}>\r\n          <Table\r\n            sx={{ minWidth: 1050, marginLeft: \"auto\" }}\r\n            size=\"small\"\r\n            aria-label=\"simple table\"\r\n          >\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>Record Id</TableCell>\r\n                <TableCell align=\"left\">User</TableCell>\r\n                <TableCell align=\"left\">Date</TableCell>\r\n                <TableCell align=\"left\">Glucose level</TableCell>\r\n                <TableCell align=\"left\">Carb intake</TableCell>\r\n                <TableCell align=\"left\">Medication Dose</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {allData.map((row) => (\r\n                <TableRow\r\n                  key={row.name}\r\n                  sx={{\r\n                    \"&:last-child td, &:last-child th\": { border: 0 },\r\n                  }}\r\n                >\r\n                  <TableCell component=\"th\" scope=\"row\">\r\n                    {row.recordId}\r\n                  </TableCell>\r\n                  <TableCell align=\"left\">{row.name}</TableCell>\r\n                  <TableCell align=\"left\">{row.date}</TableCell>\r\n                  <TableCell align=\"left\">{row.glucoseBlood} mg/dL</TableCell>\r\n                  <TableCell align=\"left\">{row.intakeCarbs} grams</TableCell>\r\n                  <TableCell align=\"left\">{row.medicationDose} grams</TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n","import './App.css';\r\nimport Form from './Form';\r\n\r\nfunction App() {\r\n  return (\r\n    <Form> </Form>);\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}